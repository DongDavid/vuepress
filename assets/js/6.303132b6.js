(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{45:function(t,a,e){"use strict";e.r(a);var s=e(0),i=Object(s.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git操作","aria-hidden":"true"}},[t._v("#")]),t._v(" git操作")]),t._v(" "),e("h2",{attrs:{id:"git仓库的创建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git仓库的创建","aria-hidden":"true"}},[t._v("#")]),t._v(" git仓库的创建")]),t._v(" "),e("p",[t._v("从命令行创建一个新的仓库")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('touch README.md\ngit init\ngit add README.md\ngit commit -m "first commit"\ngit remote add origin https://gogs.dongdavid.com/dongdavid/git-test.git\ngit push -u origin master\n')])])]),e("p",[t._v("从命令行推送已经创建的仓库")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git remote add origin https://gogs.dongdavid.com/dongdavid/git-test.git\ngit push -u origin master\n")])])]),e("h2",{attrs:{id:"git-远程仓库管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-远程仓库管理","aria-hidden":"true"}},[t._v("#")]),t._v(" git 远程仓库管理")]),t._v(" "),e("p",[t._v("查看已存在的远程仓库别名")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git remote\n")])])]),e("p",[t._v("查看远程仓库详细信息(包括地址)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git remote -v\n")])])]),e("p",[t._v("增加远程仓库")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# git remote add 别名 仓库地址\ngit remote add test https://gogs.dongdavid.com/dongdavid/git-test1.git\n")])])]),e("p",[t._v("删除远程仓库")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git remote remove [仓库别名]\n")])])]),e("p",[t._v("修改远程仓库地址")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 先删除已有远程仓库，在添加新的远程仓库\ngit remote remove origin\ngit remote add origin https://gogs.dongdavid.com/xxx.git\n\n# 直接修改远程仓库地址\ngit remote set-url origin https://gogs.dongdavid.com/xxx.git\n")])])]),e("h2",{attrs:{id:"git-提交修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-提交修改","aria-hidden":"true"}},[t._v("#")]),t._v(" git 提交修改")]),t._v(" "),e("p",[t._v("将当前所有修改存入暂存区")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git add .\n")])])]),e("p",[t._v("提交指定文件的修改")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git add readme.md\n")])])]),e("p",[t._v("提交指定目录下的所有修改")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git add application/view\n")])])]),e("p",[t._v("提交所有的修改，包括删除文件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git add -A\ngit add --all\n")])])]),e("p",[t._v("提交被监控文件的修改，未被提交到暂存区/仓库的文件不会被提交"),e("br"),t._v("\n即新建的文件不会被提交")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git add -u\ngit add --update\n")])])]),e("p",[t._v("提交被忽略的文件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git add -f xxx.md\n")])])]),e("h2",{attrs:{id:"git-查看暂存区中的文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-查看暂存区中的文件","aria-hidden":"true"}},[t._v("#")]),t._v(" git 查看暂存区中的文件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git ls-files\n")])])]),e("hr"),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("参数")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("--cached")]),t._v(" "),e("td",[t._v("显示暂存区中的文件，git ls-files命令默认的参数")])]),t._v(" "),e("tr",[e("td",[t._v("-c")]),t._v(" "),e("td",[t._v("--cached的简写")])]),t._v(" "),e("tr",[e("td",[t._v("--deleted")]),t._v(" "),e("td",[t._v("显示删除的文件")])]),t._v(" "),e("tr",[e("td",[t._v("-d")]),t._v(" "),e("td",[t._v("-deleted的简写")])]),t._v(" "),e("tr",[e("td",[t._v("--modified")]),t._v(" "),e("td",[t._v("显示修改过的文件")])]),t._v(" "),e("tr",[e("td",[t._v("-m")]),t._v(" "),e("td",[t._v("--modified参数的简写")])]),t._v(" "),e("tr",[e("td",[t._v("--other")]),t._v(" "),e("td",[t._v("显示没有被git跟踪的文件")])]),t._v(" "),e("tr",[e("td",[t._v("-o")]),t._v(" "),e("td",[t._v("--other的简写")])]),t._v(" "),e("tr",[e("td",[t._v("--stage")]),t._v(" "),e("td",[t._v("显示mode以及文件对应的Blob对象，进而我们可以获取暂存区中对应文件里面的内容。")])]),t._v(" "),e("tr",[e("td",[t._v("-s")]),t._v(" "),e("td",[t._v("--stage简写")])])])]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("查看修改内容")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git ls-files -s\n100644 d33a04b426ec047748c62b8c625b73786ea81c2f 0\treadme.md\n# 命令显示版本库对象的内容、类型及大小信息 -p 用于友好的显示内容\ngit cat-file -p d33a04b426ec047748c62b8c625b73786ea81c2f\n")])])]),e("h2",{attrs:{id:"git-提交忽略文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-提交忽略文件","aria-hidden":"true"}},[t._v("#")]),t._v(" git 提交忽略文件")]),t._v(" "),e("p",[t._v("一种方式是每次提交的时候只提交指定的文件和目录\n另一种方式是使用"),e("code",[t._v(".gitignore")]),t._v("文件")]),t._v(" "),e("p",[e("code",[t._v(".gitignore")]),t._v("忽略优先级 (由高到低)")]),t._v(" "),e("ul",[e("li",[t._v("从命令行中读取可用的忽略规则")]),t._v(" "),e("li",[t._v("当前目录定义的规则")]),t._v(" "),e("li",[t._v("父级目录定义的规则，依次递推")]),t._v(" "),e("li",[t._v("$GIT_DIR/info/exclude 文件中定义的规则")]),t._v(" "),e("li",[t._v("core.excludesfile中定义的全局规则")])]),t._v(" "),e("p",[e("code",[t._v(".gitignore")]),t._v("文件的语法规则")]),t._v(" "),e("ul",[e("li",[t._v("空格不匹配任意文件，可作为分隔符，可用反斜杠转义")]),t._v(" "),e("li",[t._v("#开头的文件标识注释，可以使用反斜杠进行转义")]),t._v(" "),e("li",[t._v("! 开头的模式标识否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用 ! 也不会再次被包含。可以使用反斜杠进行转义")]),t._v(" "),e("li",[t._v("/ 结束的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件")]),t._v(" "),e("li",[t._v("/ 开始的模式匹配项目根目录")]),t._v(" "),e("li",[t._v("如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，如果该模式不在 .gitignore 文件中，则相对于项目根目录")]),t._v(" "),e("li",[t._v("** 匹配多级目录，可在开始，中间，结束")]),t._v(" "),e("li",[t._v("? 通用匹配单个字符")]),t._v(" "),e("li",[t._v("[] 通用匹配单个字符列表")])]),t._v(" "),e("p",[e("code",[t._v(".gitignore")]),t._v("语法示例")]),t._v(" "),e("ul",[e("li",[t._v("bin/: 忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 * bin 文件")]),t._v(" "),e("li",[t._v("/bin: 忽略根目录下的bin文件")]),t._v(" "),e("li",[t._v("/*.c: 忽略 cat.c，不忽略 build/cat.c")]),t._v(" "),e("li",[t._v("debug/*.obj: 忽略 debug/io.obj，不忽略 debug/common/io.obj 和 * tools/debug/io.obj")]),t._v(" "),e("li",[t._v("**/foo: 忽略/foo, a/foo, a/b/foo等")]),t._v(" "),e("li",[t._v("a/**/b: 忽略a/b, a/x/b, a/x/y/b等")]),t._v(" "),e("li",[t._v("!/bin/run.sh: 不忽略 bin 目录下的 run.sh 文件")]),t._v(" "),e("li",[t._v("*.log: 忽略所有 .log 文件")]),t._v(" "),e("li",[t._v("config.php: 忽略当前路径的 config.php 文件")])]),t._v(" "),e("p",[e("code",[t._v(".gitignore")]),t._v("规则不生效"),e("br"),t._v(" "),e("code",[t._v(".gitignore")]),t._v("文件只能忽略没有被提交过的文件，如果某些文件已经被纳入了版本管理，则需要先把本地缓存删除,再提交")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git rm -r --cached\n")])])]),e("h2",{attrs:{id:"git-提交修改至仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-提交修改至仓库","aria-hidden":"true"}},[t._v("#")]),t._v(" git 提交修改至仓库")]),t._v(" "),e("p",[t._v("将暂存区中提交的修改提交到仓库，为存入暂存区的修改不会提交")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git commit -m '提交说明'\n")])])]),e("p",[t._v("将本地修改及暂存区中的修改提交至仓库 等同于执行了"),e("code",[t._v("git add .")]),t._v("和"),e("code",[t._v("git commit -m ''")]),t._v("两条命令")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git commit -am '将本地修改及暂存区中的修改提交至仓库'\ngit commit -a -m '将本地修改及暂存区中的修改提交至仓库'\n")])])]),e("h2",{attrs:{id:"git-拉取远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-拉取远程仓库","aria-hidden":"true"}},[t._v("#")]),t._v(" git 拉取远程仓库")]),t._v(" "),e("p",[t._v("常规操作")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git pull\n# pull 等于 fetch+merge \n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git fetch\n")])])]),e("h2",{attrs:{id:"回滚远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#回滚远程仓库","aria-hidden":"true"}},[t._v("#")]),t._v(" 回滚远程仓库")]),t._v(" "),e("p",[t._v("【远程代码库回滚】：")]),t._v(" "),e("p",[t._v("这个是重点要说的内容，过程比本地回滚要复杂")]),t._v(" "),e("p",[t._v("应用场景：自动部署系统发布后发现问题，需要回滚到某一个commit，再重新发布")]),t._v(" "),e("p",[t._v("原理：先将本地分支退回到某个commit，删除远程分支，再重新push本地分支")]),t._v(" "),e("p",[t._v("操作步骤：")]),t._v(" "),e("p",[t._v("1、git checkout master // 切换到目标分支")]),t._v(" "),e("p",[t._v("2、git pull // 从远处仓库拉去分支最新状态")]),t._v(" "),e("p",[t._v("3、git branch master_backup //备份一下这个分支当前的情况")]),t._v(" "),e("p",[t._v("4、git reset --hard the_commit_id //把the_branch本地回滚到the_commit_id")]),t._v(" "),e("p",[t._v("5、git push origin :master //删除远程 master 这个方法我报错了， 其实质是用一个空的分支去覆盖远程分支 git push origin [本地分支]:[远程分支]\n// 这里应该要用 git push -f origin master才能覆盖上去")]),t._v(" "),e("p",[t._v("6、git push origin master //用回滚后的本地分支重新建立远程分支")]),t._v(" "),e("p",[t._v("7、git push origin :master_backup //如果前面都成功了，删除这个备份分支")]),t._v(" "),e("p",[t._v("8、git fetch --all && git reset --hard origin/master && git pull // 从远程仓库拉取强制覆盖本地仓库")]),t._v(" "),e("h2",{attrs:{id:"合并两次存在冲突的commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合并两次存在冲突的commit","aria-hidden":"true"}},[t._v("#")]),t._v(" 合并两次存在冲突的commit")]),t._v(" "),e("p",[t._v("A修改了change.html文件,并提交推送至远程仓库\nB修改了change.html文件,并提交,但是推送失败了.")]),t._v(" "),e("p",[t._v("无法正常push和pull")]),t._v(" "),e("p",[t._v("pull的时候错误信息提示自动合并失败，需要手工合并"),e("br"),t._v("\n此时需要执行"),e("code",[t._v("git fetch")]),t._v("\n再执行"),e("code",[t._v("git merge")]),t._v("命令\n执行"),e("code",[t._v("merge")]),t._v("命令后会将两次commit的内容都合并到冲突文件上\n此时因为无法自动合并\n需要对冲突的文件进行手工修改"),e("br"),t._v("\n再执行"),e("code",[t._v("git add git commit")]),t._v("重新提交合并后的代码")]),t._v(" "),e("h2",{attrs:{id:"比较文件差异"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#比较文件差异","aria-hidden":"true"}},[t._v("#")]),t._v(" 比较文件差异")]),t._v(" "),e("p",[t._v("比较本地的readme.txt文件和仓库中的差异")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git diff HEAD –- readme.txt\n")])])]),e("h2",{attrs:{id:"恢复单个文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#恢复单个文件","aria-hidden":"true"}},[t._v("#")]),t._v(" 恢复单个文件")]),t._v(" "),e("p",[t._v("讲readme.txt恢复到最近一次add或commit之前")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git checkout –- readme.txt\n")])])]),e("h2",{attrs:{id:"git-回滚"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-回滚","aria-hidden":"true"}},[t._v("#")]),t._v(" git 回滚")]),t._v(" "),e("p",[t._v("把readme.txt在暂存区的修改取消掉")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git reset HEAD readme.txt\n")])])]),e("h2",{attrs:{id:"暂存本地修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#暂存本地修改","aria-hidden":"true"}},[t._v("#")]),t._v(" 暂存本地修改")]),t._v(" "),e("p",[t._v("本地修改文件后未commit,此时需要拉去远程仓库更新出现冲突,\n则可以使用"),e("code",[t._v("git stash")]),t._v("暂存本地修改\n然后再"),e("code",[t._v("git pull")]),t._v(" 同步远程仓库到本地\n再"),e("code",[t._v("git stash pop")]),t._v("把最近一次暂存的本地修改还原至文件")]),t._v(" "),e("p",[t._v("查看stash列表")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git stash list\n")])])]),e("p",[t._v("删除stash")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git stash clear // 清空所有的记录\ngit stash drop // 删除最早的一条记录\ngit stash drop stash@{1} // 删除指定标号为1的记录\n")])])]),e("h2",{attrs:{id:"克隆仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#克隆仓库","aria-hidden":"true"}},[t._v("#")]),t._v(" 克隆仓库")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git clone https:://repo\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git clone -b [分支名称] repo\n")])])])])},[],!1,null,null,null);a.default=i.exports}}]);